// <auto-generated />
using System;
using GTO.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GTO.Infrastructure.Migrations
{
    [DbContext(typeof(GTODbContext))]
    partial class GTODbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("GTO.EntityModel.Entities.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssessmentMonthId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Assigned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BoardLink")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConductDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Conducted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConductedById")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Marked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxMarks")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObtainedMarks")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("ReportGenerated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentMonthId");

                    b.HasIndex("ConductedById");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.AssessmentMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthName")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubmitDeadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Months");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.Coordinator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EmployementDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficialEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SkypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SkypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Coordinators");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.DayName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WeekDays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Monday"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tuesday"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Wednesday"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Thursday"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Friday"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Saturday"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sunday"
                        });
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.ELevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RegionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.EvaluationTweak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tweak")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Tweaks");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EmployementDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficialEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SkypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SkypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.RatingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "NA",
                            Name = "Excellent",
                            ShortName = "E",
                            Value = 3
                        },
                        new
                        {
                            Id = 2,
                            Description = "NA",
                            Name = "Satisfactory",
                            ShortName = "S",
                            Value = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "NA",
                            Name = "Needs Improvement",
                            ShortName = "NI",
                            Value = 1
                        });
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "USA"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "UK"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "India"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name = "KSA"
                        });
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.ReportHead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("AssignedToTeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssugnedById")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToTeacherId");

                    b.HasIndex("AssugnedById");

                    b.HasIndex("MonthId");

                    b.HasIndex("StudentId");

                    b.ToTable("RptHead");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.ReportItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Grade")
                        .HasColumnType("TEXT");

                    b.Property<int>("HeadId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("HeadId");

                    b.ToTable("RptDetails");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SkypId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SkypName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RegionId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.SubjectAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SessionTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubAlloc");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.SubjectEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RatingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("RatingId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.SubjectName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SubName = "Learning Environment"
                        },
                        new
                        {
                            Id = 2,
                            SubName = "Physics"
                        },
                        new
                        {
                            Id = 3,
                            SubName = "Chemistry"
                        },
                        new
                        {
                            Id = 4,
                            SubName = "Biology"
                        },
                        new
                        {
                            Id = 5,
                            SubName = "English"
                        },
                        new
                        {
                            Id = 6,
                            SubName = "ELA"
                        },
                        new
                        {
                            Id = 7,
                            SubName = "Reading"
                        },
                        new
                        {
                            Id = 8,
                            SubName = "Mathematics"
                        },
                        new
                        {
                            Id = 9,
                            SubName = "Behavior and Work Habit Evaluation"
                        },
                        new
                        {
                            Id = 10,
                            SubName = "Attendance"
                        });
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EmployementDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficialEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SkypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SkypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.Assessment", b =>
                {
                    b.HasOne("GTO.EntityModel.Entities.AssessmentMonth", null)
                        .WithMany("Assessments")
                        .HasForeignKey("AssessmentMonthId");

                    b.HasOne("GTO.EntityModel.Entities.Teacher", "ConductedBy")
                        .WithMany()
                        .HasForeignKey("ConductedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTO.EntityModel.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTO.EntityModel.Entities.SubjectName", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConductedBy");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.ELevel", b =>
                {
                    b.HasOne("GTO.EntityModel.Entities.Region", "Region")
                        .WithMany("Classes")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.EvaluationTweak", b =>
                {
                    b.HasOne("GTO.EntityModel.Entities.SubjectName", "Subject")
                        .WithMany("EvaluationTweaks")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.ReportHead", b =>
                {
                    b.HasOne("GTO.EntityModel.Entities.Teacher", "AssignedToTeacher")
                        .WithMany("AssignedReports")
                        .HasForeignKey("AssignedToTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTO.EntityModel.Entities.Coordinator", "AssugnedBy")
                        .WithMany("AssignedReports")
                        .HasForeignKey("AssugnedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTO.EntityModel.Entities.AssessmentMonth", "Month")
                        .WithMany()
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTO.EntityModel.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToTeacher");

                    b.Navigation("AssugnedBy");

                    b.Navigation("Month");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.ReportItem", b =>
                {
                    b.HasOne("GTO.EntityModel.Entities.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTO.EntityModel.Entities.ReportHead", "Head")
                        .WithMany("Items")
                        .HasForeignKey("HeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Head");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.Student", b =>
                {
                    b.HasOne("GTO.EntityModel.Entities.ELevel", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTO.EntityModel.Entities.Parent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTO.EntityModel.Entities.Region", "Region")
                        .WithMany("Students")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Parent");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.SubjectAllocation", b =>
                {
                    b.HasOne("GTO.EntityModel.Entities.DayName", "Day")
                        .WithMany("DaySchedule")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTO.EntityModel.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTO.EntityModel.Entities.SubjectName", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTO.EntityModel.Entities.Teacher", "Teacher")
                        .WithMany("Schedule")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.SubjectEvaluation", b =>
                {
                    b.HasOne("GTO.EntityModel.Entities.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTO.EntityModel.Entities.RatingItem", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.AssessmentMonth", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.Coordinator", b =>
                {
                    b.Navigation("AssignedReports");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.DayName", b =>
                {
                    b.Navigation("DaySchedule");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.ELevel", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.Parent", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.Region", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.ReportHead", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.SubjectName", b =>
                {
                    b.Navigation("EvaluationTweaks");
                });

            modelBuilder.Entity("GTO.EntityModel.Entities.Teacher", b =>
                {
                    b.Navigation("AssignedReports");

                    b.Navigation("Schedule");
                });
#pragma warning restore 612, 618
        }
    }
}
